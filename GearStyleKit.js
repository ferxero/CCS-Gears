//
//  GearStyleKit.js
//  CCS-Gears
//
//  Created by Fernando on 1/2/20.
//  Copyright Â© 2020 CCSys. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



//// APIs you can use in your code:
//
// Available methods for drawing into <canvas> elements:
//    GearStyleKit.drawGears(canvas, angle, targetFrame*, resizing*)
//
// NOTE: 'canvas' parameter can be either a <canvas> element object, or the id of a <canvas> element in your document.
//
// NOTE: Parameters marked with the '*' symbol are optional
//
// NOTE: Possible arguments for 'resizing' parameter in drawing methods are:
//   'aspectfit': The content is proportionally resized to fit into the target rectangle.
//   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
//   'stretch': The content is stretched to match the entire target rectangle.
//   'center': The content is centered in the target rectangle, but it is NOT resized.
//
// Available Utilities:
//    GearStyleKit.clearCanvas(canvas)
//    GearStyleKit.makeRect(x, y, width, height)


//// Create StyleKit Object
var GearStyleKit = {};
(function() {

    //// Drawing Methods

    function drawGears(canvas, angle, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 240, 200), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 240, resizedFrame.h / 200);


        //// Color Declarations
        var color = 'rgba(212, 69, 69, 1)';
        var color2 = 'rgba(216, 110, 114, 1)';
        var color3 = 'rgba(255, 255, 255, 1)';
        var color4 = 'rgba(188, 104, 104, 1)';

        //// Variable Declarations
        var smallAngle = -angle / 2;

        //// Bezier Drawing
        context.save();
        context.translate(149.85, 96.15);
        context.rotate(-smallAngle * Math.PI / 180);

        context.beginPath();
        context.moveTo(2.78, -67.94);
        context.bezierCurveTo(3.71, -63.88, 4.74, -59.43, 5.59, -55.72);
        context.bezierCurveTo(7.73, -55.51, 9.84, -55.18, 11.9, -54.73);
        context.bezierCurveTo(13.87, -58, 16.21, -61.91, 18.36, -65.49);
        context.bezierCurveTo(20.15, -64.99, 21.91, -64.42, 23.64, -63.78);
        context.bezierCurveTo(23.27, -59.62, 22.87, -55.08, 22.54, -51.28);
        context.bezierCurveTo(24.5, -50.42, 26.4, -49.45, 28.23, -48.37);
        context.bezierCurveTo(31.11, -50.87, 34.55, -53.87, 37.69, -56.6);
        context.bezierCurveTo(39.24, -55.58, 40.73, -54.49, 42.18, -53.34);
        context.bezierCurveTo(40.55, -49.5, 38.77, -45.3, 37.28, -41.79);
        context.bezierCurveTo(38.87, -40.37, 40.37, -38.87, 41.79, -37.28);
        context.bezierCurveTo(45.3, -38.77, 49.5, -40.55, 53.34, -42.18);
        context.bezierCurveTo(54.49, -40.73, 55.58, -39.24, 56.6, -37.69);
        context.bezierCurveTo(53.87, -34.55, 50.87, -31.11, 48.37, -28.23);
        context.bezierCurveTo(49.45, -26.4, 50.42, -24.5, 51.28, -22.54);
        context.bezierCurveTo(55.08, -22.87, 59.62, -23.27, 63.78, -23.64);
        context.bezierCurveTo(64.42, -21.91, 64.99, -20.15, 65.49, -18.36);
        context.bezierCurveTo(61.91, -16.21, 58, -13.87, 54.73, -11.9);
        context.bezierCurveTo(55.18, -9.84, 55.51, -7.73, 55.72, -5.59);
        context.bezierCurveTo(59.43, -4.74, 63.88, -3.71, 67.94, -2.78);
        context.bezierCurveTo(67.98, -1.86, 68, -0.93, 68, 0);
        context.bezierCurveTo(68, 0.93, 67.98, 1.86, 67.94, 2.78);
        context.bezierCurveTo(63.88, 3.71, 59.43, 4.74, 55.72, 5.59);
        context.bezierCurveTo(55.51, 7.73, 55.18, 9.84, 54.73, 11.9);
        context.bezierCurveTo(58, 13.87, 61.91, 16.21, 65.49, 18.36);
        context.bezierCurveTo(64.99, 20.15, 64.42, 21.91, 63.78, 23.64);
        context.bezierCurveTo(59.62, 23.27, 55.08, 22.87, 51.28, 22.54);
        context.bezierCurveTo(50.42, 24.5, 49.45, 26.4, 48.37, 28.23);
        context.bezierCurveTo(50.87, 31.11, 53.87, 34.55, 56.6, 37.69);
        context.bezierCurveTo(55.58, 39.24, 54.49, 40.73, 53.34, 42.18);
        context.bezierCurveTo(49.5, 40.55, 45.3, 38.77, 41.79, 37.28);
        context.bezierCurveTo(40.37, 38.87, 38.87, 40.37, 37.28, 41.79);
        context.bezierCurveTo(38.77, 45.3, 40.55, 49.5, 42.18, 53.34);
        context.bezierCurveTo(40.73, 54.49, 39.24, 55.58, 37.69, 56.6);
        context.bezierCurveTo(34.55, 53.87, 31.11, 50.87, 28.23, 48.37);
        context.bezierCurveTo(26.4, 49.45, 24.5, 50.42, 22.54, 51.28);
        context.bezierCurveTo(22.87, 55.08, 23.27, 59.62, 23.64, 63.78);
        context.bezierCurveTo(21.91, 64.42, 20.15, 64.99, 18.36, 65.49);
        context.bezierCurveTo(16.21, 61.91, 13.87, 58, 11.9, 54.73);
        context.bezierCurveTo(9.84, 55.18, 7.73, 55.51, 5.59, 55.72);
        context.bezierCurveTo(4.74, 59.43, 3.71, 63.88, 2.78, 67.94);
        context.bezierCurveTo(1.86, 67.98, 0.93, 68, -0, 68);
        context.bezierCurveTo(-0.93, 68, -1.86, 67.98, -2.78, 67.94);
        context.bezierCurveTo(-3.71, 63.88, -4.74, 59.43, -5.59, 55.72);
        context.bezierCurveTo(-7.73, 55.51, -9.84, 55.18, -11.9, 54.73);
        context.bezierCurveTo(-13.87, 58, -16.21, 61.91, -18.36, 65.49);
        context.bezierCurveTo(-20.15, 64.99, -21.91, 64.42, -23.64, 63.78);
        context.bezierCurveTo(-23.27, 59.62, -22.87, 55.08, -22.54, 51.28);
        context.bezierCurveTo(-24.5, 50.42, -26.4, 49.45, -28.23, 48.37);
        context.bezierCurveTo(-31.11, 50.87, -34.55, 53.87, -37.69, 56.6);
        context.bezierCurveTo(-39.24, 55.58, -40.73, 54.49, -42.18, 53.34);
        context.bezierCurveTo(-40.55, 49.5, -38.77, 45.3, -37.28, 41.79);
        context.bezierCurveTo(-38.87, 40.37, -40.37, 38.87, -41.79, 37.28);
        context.bezierCurveTo(-45.3, 38.77, -49.5, 40.55, -53.34, 42.18);
        context.bezierCurveTo(-54.49, 40.73, -55.58, 39.24, -56.6, 37.69);
        context.bezierCurveTo(-53.87, 34.55, -50.87, 31.11, -48.37, 28.23);
        context.bezierCurveTo(-49.45, 26.4, -50.42, 24.5, -51.28, 22.54);
        context.bezierCurveTo(-55.08, 22.87, -59.62, 23.27, -63.78, 23.64);
        context.bezierCurveTo(-64.42, 21.91, -64.99, 20.15, -65.49, 18.36);
        context.bezierCurveTo(-61.91, 16.21, -58, 13.87, -54.73, 11.9);
        context.bezierCurveTo(-55.18, 9.84, -55.51, 7.73, -55.72, 5.59);
        context.bezierCurveTo(-59.43, 4.74, -63.88, 3.71, -67.94, 2.78);
        context.bezierCurveTo(-67.98, 1.86, -68, 0.93, -68, 0);
        context.bezierCurveTo(-68, -0.93, -67.98, -1.86, -67.94, -2.78);
        context.bezierCurveTo(-63.88, -3.71, -59.43, -4.74, -55.72, -5.59);
        context.bezierCurveTo(-55.51, -7.73, -55.18, -9.84, -54.73, -11.9);
        context.bezierCurveTo(-58, -13.87, -61.91, -16.21, -65.49, -18.36);
        context.bezierCurveTo(-64.99, -20.15, -64.42, -21.91, -63.78, -23.64);
        context.bezierCurveTo(-59.62, -23.27, -55.08, -22.87, -51.28, -22.54);
        context.bezierCurveTo(-50.42, -24.5, -49.45, -26.4, -48.37, -28.23);
        context.bezierCurveTo(-50.87, -31.11, -53.87, -34.55, -56.6, -37.69);
        context.bezierCurveTo(-55.58, -39.24, -54.49, -40.73, -53.34, -42.18);
        context.bezierCurveTo(-49.5, -40.55, -45.3, -38.77, -41.79, -37.28);
        context.bezierCurveTo(-40.37, -38.87, -38.87, -40.37, -37.28, -41.79);
        context.bezierCurveTo(-38.77, -45.3, -40.55, -49.5, -42.18, -53.34);
        context.bezierCurveTo(-41.55, -53.84, -40.91, -54.33, -40.26, -54.81);
        context.bezierCurveTo(-39.42, -55.43, -38.56, -56.03, -37.69, -56.6);
        context.bezierCurveTo(-34.55, -53.87, -31.11, -50.87, -28.23, -48.37);
        context.bezierCurveTo(-26.4, -49.45, -24.5, -50.42, -22.54, -51.28);
        context.bezierCurveTo(-22.87, -55.08, -23.27, -59.62, -23.64, -63.78);
        context.bezierCurveTo(-21.91, -64.42, -20.15, -64.99, -18.36, -65.49);
        context.bezierCurveTo(-16.21, -61.91, -13.87, -58, -11.9, -54.73);
        context.bezierCurveTo(-9.84, -55.18, -7.73, -55.51, -5.59, -55.72);
        context.bezierCurveTo(-4.74, -59.43, -3.71, -63.88, -2.78, -67.94);
        context.bezierCurveTo(-1.93, -67.98, -1.08, -68, -0.23, -68);
        context.lineTo(0, -68);
        context.bezierCurveTo(0.93, -68, 1.86, -67.98, 2.78, -67.94);
        context.closePath();
        context.moveTo(0, -36);
        context.bezierCurveTo(-6.22, -36, -12.07, -34.42, -17.18, -31.65);
        context.bezierCurveTo(-28.39, -25.55, -36, -13.66, -36, 0);
        context.bezierCurveTo(-36, 19.88, -19.88, 36, 0, 36);
        context.bezierCurveTo(19.88, 36, 36, 19.88, 36, 0);
        context.bezierCurveTo(36, -19.88, 19.88, -36, 0, -36);
        context.closePath();
        context.fillStyle = color;
        context.fill();

        context.restore();


        //// Bezier 2 Drawing
        context.save();
        context.translate(52.44, 138.03);
        context.rotate(-angle * Math.PI / 180);

        context.beginPath();
        context.moveTo(2.3, -39.44);
        context.lineTo(2.65, -39.42);
        context.bezierCurveTo(3.55, -35.84, 4.55, -31.92, 5.37, -28.65);
        context.bezierCurveTo(6.73, -28.41, 8.06, -28.09, 9.35, -27.69);
        context.bezierCurveTo(10.67, -27.28, 11.94, -26.79, 13.17, -26.21);
        context.bezierCurveTo(15.84, -28.39, 19.04, -31.01, 21.96, -33.39);
        context.bezierCurveTo(23.46, -32.48, 24.89, -31.48, 26.25, -30.39);
        context.bezierCurveTo(24.79, -26.99, 23.2, -23.25, 21.86, -20.14);
        context.bezierCurveTo(23.76, -18.24, 25.38, -16.1, 26.69, -13.77);
        context.bezierCurveTo(30.18, -14.02, 34.37, -14.33, 38.19, -14.6);
        context.bezierCurveTo(38.84, -13.04, 39.39, -11.42, 39.83, -9.76);
        context.bezierCurveTo(36.57, -7.83, 32.99, -5.71, 30, -3.94);
        context.bezierCurveTo(30.19, -2.65, 30.28, -1.34, 30.28, 0);
        context.bezierCurveTo(30.28, 1.34, 30.19, 2.65, 30.01, 3.94);
        context.bezierCurveTo(32.99, 5.71, 36.57, 7.83, 39.83, 9.76);
        context.bezierCurveTo(39.39, 11.42, 38.84, 13.04, 38.19, 14.6);
        context.bezierCurveTo(34.37, 14.33, 30.18, 14.02, 26.69, 13.76);
        context.bezierCurveTo(25.38, 16.1, 23.76, 18.24, 21.86, 20.14);
        context.bezierCurveTo(23.2, 23.25, 24.79, 26.99, 26.25, 30.39);
        context.bezierCurveTo(24.89, 31.48, 23.46, 32.48, 21.97, 33.39);
        context.bezierCurveTo(19.04, 31.01, 15.84, 28.39, 13.17, 26.21);
        context.bezierCurveTo(10.74, 27.35, 8.12, 28.18, 5.37, 28.65);
        context.bezierCurveTo(4.55, 31.92, 3.55, 35.84, 2.65, 39.42);
        context.bezierCurveTo(1.77, 39.47, 0.89, 39.5, -0, 39.5);
        context.bezierCurveTo(-0.89, 39.5, -1.77, 39.47, -2.65, 39.42);
        context.bezierCurveTo(-3.55, 35.84, -4.55, 31.92, -5.37, 28.65);
        context.bezierCurveTo(-8.12, 28.18, -10.74, 27.35, -13.17, 26.21);
        context.bezierCurveTo(-15.84, 28.39, -19.04, 31.01, -21.96, 33.39);
        context.bezierCurveTo(-23.46, 32.48, -24.89, 31.48, -26.25, 30.39);
        context.bezierCurveTo(-24.79, 26.99, -23.2, 23.25, -21.86, 20.14);
        context.bezierCurveTo(-23.76, 18.24, -25.38, 16.1, -26.69, 13.77);
        context.bezierCurveTo(-30.18, 14.02, -34.37, 14.33, -38.19, 14.6);
        context.bezierCurveTo(-38.84, 13.04, -39.39, 11.42, -39.83, 9.76);
        context.bezierCurveTo(-36.57, 7.83, -32.99, 5.71, -30, 3.94);
        context.bezierCurveTo(-30.19, 2.65, -30.28, 1.34, -30.28, 0);
        context.bezierCurveTo(-30.28, -1.34, -30.19, -2.65, -30.01, -3.94);
        context.bezierCurveTo(-32.99, -5.71, -36.57, -7.83, -39.83, -9.76);
        context.bezierCurveTo(-39.39, -11.42, -38.84, -13.04, -38.19, -14.6);
        context.bezierCurveTo(-34.37, -14.33, -30.18, -14.02, -26.69, -13.76);
        context.bezierCurveTo(-25.38, -16.1, -23.76, -18.24, -21.86, -20.14);
        context.bezierCurveTo(-23.2, -23.25, -24.79, -26.99, -26.25, -30.39);
        context.bezierCurveTo(-24.89, -31.48, -23.46, -32.48, -21.97, -33.39);
        context.bezierCurveTo(-19.04, -31.01, -15.84, -28.39, -13.17, -26.21);
        context.bezierCurveTo(-10.74, -27.35, -8.12, -28.18, -5.37, -28.65);
        context.bezierCurveTo(-4.55, -31.92, -3.55, -35.84, -2.65, -39.42);
        context.bezierCurveTo(-1.77, -39.47, -0.89, -39.5, 0, -39.5);
        context.bezierCurveTo(0.77, -39.5, 1.54, -39.48, 2.3, -39.44);
        context.closePath();
        context.moveTo(0, -14.55);
        context.bezierCurveTo(-8.36, -14.55, -15.14, -8.04, -15.14, 0);
        context.bezierCurveTo(-15.14, 8.04, -8.36, 14.55, 0, 14.55);
        context.bezierCurveTo(8.36, 14.55, 15.14, 8.04, 15.14, 0);
        context.bezierCurveTo(15.14, -5.7, 11.74, -10.63, 6.78, -13.02);
        context.bezierCurveTo(4.74, -14, 2.44, -14.55, 0, -14.55);
        context.closePath();
        context.fillStyle = color2;
        context.fill();

        context.restore();


        //// Bezier 3 Drawing
        context.save();
        context.translate(68.94, 37.52);
        context.rotate(-(angle - 752.017184641) * Math.PI / 180);

        context.beginPath();
        context.moveTo(2.02, -34.95);
        context.lineTo(2.33, -34.93);
        context.bezierCurveTo(3.12, -31.76, 3.99, -28.28, 4.72, -25.38);
        context.bezierCurveTo(5.92, -25.18, 7.09, -24.89, 8.22, -24.54);
        context.bezierCurveTo(9.38, -24.17, 10.5, -23.73, 11.58, -23.23);
        context.bezierCurveTo(13.92, -25.16, 16.74, -27.47, 19.3, -29.59);
        context.bezierCurveTo(20.62, -28.78, 21.87, -27.89, 23.07, -26.93);
        context.bezierCurveTo(21.79, -23.91, 20.38, -20.6, 19.21, -17.84);
        context.bezierCurveTo(20.87, -16.16, 22.3, -14.26, 23.45, -12.2);
        context.bezierCurveTo(26.52, -12.42, 30.2, -12.69, 33.56, -12.94);
        context.bezierCurveTo(34.13, -11.55, 34.61, -10.12, 35, -8.65);
        context.bezierCurveTo(32.13, -6.94, 28.99, -5.06, 26.37, -3.49);
        context.bezierCurveTo(26.53, -2.35, 26.61, -1.18, 26.61, 0);
        context.bezierCurveTo(26.61, 1.18, 26.53, 2.35, 26.37, 3.49);
        context.bezierCurveTo(28.99, 5.06, 32.13, 6.94, 35, 8.65);
        context.bezierCurveTo(34.61, 10.12, 34.13, 11.55, 33.56, 12.94);
        context.bezierCurveTo(30.2, 12.69, 26.52, 12.42, 23.45, 12.2);
        context.bezierCurveTo(22.3, 14.26, 20.87, 16.16, 19.21, 17.84);
        context.bezierCurveTo(20.38, 20.6, 21.79, 23.91, 23.07, 26.93);
        context.bezierCurveTo(21.87, 27.89, 20.62, 28.78, 19.3, 29.59);
        context.bezierCurveTo(16.74, 27.47, 13.92, 25.16, 11.58, 23.23);
        context.bezierCurveTo(9.44, 24.23, 7.13, 24.97, 4.72, 25.38);
        context.bezierCurveTo(3.99, 28.28, 3.12, 31.76, 2.33, 34.93);
        context.bezierCurveTo(1.56, 34.98, 0.78, 35, -0, 35);
        context.bezierCurveTo(-0.78, 35, -1.56, 34.98, -2.33, 34.93);
        context.bezierCurveTo(-3.12, 31.76, -3.99, 28.28, -4.72, 25.38);
        context.bezierCurveTo(-7.13, 24.97, -9.44, 24.23, -11.58, 23.23);
        context.bezierCurveTo(-13.92, 25.16, -16.74, 27.47, -19.3, 29.59);
        context.bezierCurveTo(-20.62, 28.78, -21.87, 27.89, -23.07, 26.93);
        context.bezierCurveTo(-21.79, 23.91, -20.38, 20.6, -19.21, 17.84);
        context.bezierCurveTo(-20.87, 16.16, -22.3, 14.26, -23.45, 12.2);
        context.bezierCurveTo(-26.52, 12.42, -30.2, 12.69, -33.56, 12.94);
        context.bezierCurveTo(-34.13, 11.55, -34.61, 10.12, -35, 8.65);
        context.bezierCurveTo(-32.13, 6.94, -28.99, 5.06, -26.37, 3.49);
        context.bezierCurveTo(-26.53, 2.35, -26.61, 1.18, -26.61, 0);
        context.bezierCurveTo(-26.61, -1.18, -26.53, -2.35, -26.37, -3.49);
        context.bezierCurveTo(-28.99, -5.06, -32.13, -6.94, -35, -8.65);
        context.bezierCurveTo(-34.61, -10.12, -34.13, -11.55, -33.56, -12.94);
        context.bezierCurveTo(-30.2, -12.69, -26.52, -12.42, -23.45, -12.2);
        context.bezierCurveTo(-22.3, -14.26, -20.87, -16.16, -19.21, -17.84);
        context.bezierCurveTo(-20.38, -20.6, -21.79, -23.91, -23.07, -26.93);
        context.bezierCurveTo(-21.87, -27.89, -20.62, -28.78, -19.3, -29.59);
        context.bezierCurveTo(-16.74, -27.47, -13.92, -25.16, -11.58, -23.23);
        context.bezierCurveTo(-9.44, -24.23, -7.13, -24.97, -4.72, -25.38);
        context.bezierCurveTo(-3.99, -28.28, -3.12, -31.76, -2.33, -34.93);
        context.bezierCurveTo(-1.56, -34.98, -0.78, -35, 0, -35);
        context.bezierCurveTo(0.68, -35, 1.35, -34.98, 2.02, -34.95);
        context.closePath();
        context.moveTo(0, -12.89);
        context.bezierCurveTo(-7.35, -12.89, -13.3, -7.12, -13.3, 0);
        context.bezierCurveTo(-13.3, 7.12, -7.35, 12.89, 0, 12.89);
        context.bezierCurveTo(7.35, 12.89, 13.3, 7.12, 13.3, 0);
        context.bezierCurveTo(13.3, -5.05, 10.31, -9.42, 5.96, -11.53);
        context.bezierCurveTo(4.16, -12.4, 2.14, -12.89, 0, -12.89);
        context.closePath();
        context.fillStyle = color4;
        context.fill();

        context.restore();


        //// Oval Drawing
        oval(context, 110, 56, 80, 80);
        context.strokeStyle = color3;
        context.lineWidth = 1;
        context.stroke();
        
        context.restore();

    }

    //// Infrastructure

    function clearCanvas(canvas) {
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
    }

    // Possible arguments for 'resizing' parameter are:
    //   'aspectfit': The content is proportionally resized to fit into the target rectangle.
    //   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
    //   'stretch': The content is stretched to match the entire target rectangle.
    //   'center': The content is centered in the target rectangle, but it is NOT resized.
    function applyResizingBehavior(resizing, rect, targetRect) {
        if (targetRect === undefined || equalRects(rect, targetRect) || equalRects(targetRect, makeRect(0, 0, 0, 0))) {
            return rect;
        }

        var scales = makeSize(0, 0);
        scales.w = Math.abs(targetRect.w / rect.w);
        scales.h = Math.abs(targetRect.h / rect.h);

        switch (resizing) {
            case 'aspectfit': {
                scales.w = Math.min(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'aspectfill': {
                scales.w = Math.max(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'stretch':
            case undefined:
                break;
            case 'center': {
                scales.w = 1;
                scales.h = 1;
                break;
            }
            default:
                throw 'Unknown resizing behavior "' + resizing + '". Use "aspectfit", "aspectfill", "stretch" or "center" as resizing behavior.';
        }

        var result = makeRect(Math.min(rect.x, rect.x + rect.w), Math.min(rect.y, rect.y + rect.h), Math.abs(rect.w), Math.abs(rect.h));
        result.w *= scales.w;
        result.h *= scales.h;
        result.x = targetRect.x + (targetRect.w - result.w) / 2;
        result.y = targetRect.y + (targetRect.h - result.h) / 2;
        return result;
    }

    function oval(context, x, y, w, h) {
        context.save();
        context.beginPath();
        context.translate(x, y);
        context.scale(w/2, h/2);
        context.arc(1, 1, 1, 0, 2*Math.PI, false);
        context.closePath();
        context.restore();
    }

    function makeRect(x, y, w, h) {
        return { x: x, y: y, w: w, h: h };
    }

    function equalRects(r1, r2) {
        return r1.x === r2.x && r1.y === r2.y && r1.w == r2.w && r1.h === r2.h;
    }

    function makeSize(w, h) {
        return { w: w, h: h };
    }

    function initializeCanvas(canvas) {
        if ('paintCodePixelRatio' in canvas) return canvas;
        // This function should only be called once on each canvas.
        var context = canvas.getContext('2d');

        var devicePixelRatio = window.devicePixelRatio || 1;
        var backingStorePixelRatio = context.webkitBackingStorePixelRatio
            || context.mozBackingStorePixelRatio
            || context.msBackingStorePixelRatio
            || context.oBackingStorePixelRatio
            || context.backingStorePixelRatio
            || 1;

        var pixelRatio = devicePixelRatio / backingStorePixelRatio;

        canvas.style.width = canvas.width + 'px';
        canvas.style.height = canvas.height + 'px';
        canvas.width *= pixelRatio;
        canvas.height *= pixelRatio;
        canvas.paintCodePixelRatio = pixelRatio;

        context.scale(pixelRatio, pixelRatio);
        return canvas;
    }

    //// Public Interface

    // Drawing Methods
    GearStyleKit.drawGears = drawGears;

    // Utilities
    GearStyleKit.clearCanvas = clearCanvas;
    GearStyleKit.makeRect = makeRect;

})();
